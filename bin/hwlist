#!/bin/bash
# hwlist v2.2 last mod 30th-Dec-2018
# Latest version at <https://github.com/SimplyLinuxFAQ/hwlist/releases/latest>
# For more details about this tool, please visit the below page: 
# <https://www.simplylinuxfaq.com/p/how-to-find-hardware-details-in-linux.html>
# Copyright 2018 SimplyLinuxFAQ <SimplyLinuxFAQ@gmail.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
#    General Public License <gnu.org/licenses/gpl.html> for more details.
#-------------------------------------------------------------------------------

#------variables used------#
S="************************************"
D="-------------------------------------"
COLOR="y"

#------Print welcome message at the top------#
headfun()
{
echo -e "\n***********************************************************************************************************"
echo -e "<>------------<> Welcome to hwlist tool which fetches hardware details from your system.   <>------------<>"
echo -e "<>------------<> This is the output produced by the tool when ran with \"--all\" or when     <>------------<>"
echo -e "<>------------<> dumped using \"--dump\" option. For help run the command with \"--help\".     <>------------<>"
echo -e "***********************************************************************************************************"
}

#------Print hostname, OS architecture and kernel version-----#
osfun()
{
echo -e "\n\t $S"
echo -e "\t\t Operating System Details"
echo -e "\t $S"

hostname -f &> /dev/null && printf "Hostname\t\t\t\t : $(hostname -f)" || printf "Hostname\t\t\t\t : $(hostname -s)"

[ -x /usr/bin/lsb_release ] &&  echo -e "\nOperating System\t\t\t :" $(lsb_release -d|awk -F: '{print $2}'|sed -e 's/^[ \t]*//')  || \
echo -e "\nOperating System\t\t\t :" $(cat /etc/system-release)

echo -e "Kernel Version\t\t\t\t :" $(uname -r)

printf "OS Architecture\t\t\t\t :"$(arch | grep x86_64 &> /dev/null) && printf " 64 Bit OS\n"  || printf " 32 Bit OS\n"

#--------Print system uptime-------#
UPTIME=$(uptime)
echo $UPTIME|grep day &> /dev/null
if [ $? != 0 ]
then
  echo $UPTIME|grep -w min &> /dev/null && echo -e "System Uptime \t\t\t\t : "$(echo $UPTIME|awk '{print $2" by "$3}'|sed -e 's/,.*//g')" minutes" \
 || echo -e "System Uptime \t\t\t\t : "$(echo $UPTIME|awk '{print $2" by "$3" "$4}'|sed -e 's/,.*//g')" hours"
else
  echo -e "System Uptime \t\t\t\t :" $(echo $UPTIME|awk '{print $2" by "$3" "$4" "$5" hours"}'|sed -e 's/,//g')
fi
echo -e "Current System Date & Time \t\t : "$(date +%c)

#-------Fetch server hardware details--------#
echo -e "\n\t $S"
echo -e "\t\t System Hardware Details"
echo -e "\t $S"
echo -e "Product Name \t\t\t\t :" $(dmidecode -s system-product-name|grep -v '^#')
echo -e "Manufacturer \t\t\t\t :" $(dmidecode -s system-manufacturer|grep -v '^#')
echo -e "System Serial Number \t\t\t :" $(dmidecode -s system-serial-number|grep -v '^#')
echo -e "System Version \t\t\t\t :" $(dmidecode -s system-version|grep -v '^#')

#-------Fetch motherboard details--------#
echo -e "\n\t $S"
echo -e "\t\t System Motherboard Details"
echo -e "\t $S"
echo -e "Manufacturer \t\t\t\t :" $(dmidecode -s baseboard-manufacturer|grep -v '^#')
echo -e "Product Name \t\t\t\t :" $(dmidecode -s baseboard-product-name|grep -v '^#')
echo -e "Version \t\t\t\t :" $(dmidecode -s baseboard-version|grep -v '^#')
echo -e "Serial Number \t\t\t\t :" $(dmidecode -s baseboard-serial-number|grep -v '^#')

#-------Fetch BIOS details--------#
echo -e "\n\t $S"
echo -e "\t\t System BIOS Details"
echo -e "\t $S"
echo -e "BIOS Vendor \t\t\t\t :" $(dmidecode -s bios-vendor|grep -v '^#')
echo -e "BIOS Version \t\t\t\t :" $(dmidecode -s bios-version|grep -v '^#')
echo -e "BIOS Release Date \t\t\t :" $(dmidecode -s bios-release-date|grep -v '^#')
}

#-------Fetch processor details--------#
procfun()
{
LPROC=$(dmidecode --type processor)
PROC=$(cat /proc/cpuinfo)

echo -e "\n\t $S"
echo -e "\t\tSystem Processor Details (CPU)"
echo -e "\t $S"

dmidecode --type system|grep -i "virtual" 1> /dev/null && VIRT='Y' || VIRT='N'
if [ $VIRT == 'Y' ]; then
 {
  echo -e "Manufacturer\t\t\t\t:" $(echo "$PROC"|grep "vendor_id"|awk -F\: '{ print $2 }'| sed 's/^[ \t]*//')
  echo -e "Model Name\t\t\t\t:" $(echo "$PROC"|grep "model name"|awk -F\: '{ print $2 }'| sed 's/^[ \t]*//')
  echo -e "CPU Family\t\t\t\t:" $(echo "$PROC"|grep "cpu family"|awk -F\: '{ print $2 }'| sed 's/^[ \t]*//')
  echo -e "CPU Stepping\t\t\t\t:" $(echo "$PROC"|grep "stepping"|awk -F\: '{ print $2 }'| sed 's/^[ \t]*//')
 }
else
 {
  echo -e "Manufacturer\t\t\t\t:" $(echo "$LPROC"|grep Manufacturer|uniq|awk -F: '{print $2}'|head -1|sed 's/ //')
  echo -e "Model Name\t\t\t\t:" $(echo "$LPROC"|grep Version|uniq|sed -e 's/Version://' -e 's/^[ \t]*//')
  echo -e "CPU Family\t\t\t\t:" $(echo "$PROC"|grep family|uniq|awk -F: '{print $2}')
  echo -e "CPU Stepping\t\t\t\t:" $(echo "$PROC"|grep stepping|awk -F: '{print $2}'|uniq)
 }
fi

COUNT=$(echo "$PROC"|grep "physical id"|sort|uniq|wc -l)

echo -e "No. Of Phyiscal Processor(s)\t\t:" $(echo $COUNT)
echo -e "No. of Core(s) per processor\t\t:" $(echo "$PROC"|grep "core id"|sort|uniq|wc -l)
echo -e "No. of Logical Processor(s)\t\t:" $(echo "$PROC"|grep processor|uniq|wc -l)
echo -e "\n\t Details Of Each Processor[s] (Based On dmidecode)\t\t"
echo -e "\t$D"

dmidecode --type system|grep -i "virtual" 1> /dev/null && VIRT='Y' || VIRT='N'
if [ $VIRT == 'Y' ]; then
  echo -e "\t >>>>>> Skipping the details since system found to be a virtual system <<<<<<\n"
else
{
 SOCK=$( echo "$LPROC" |egrep -w -m$COUNT "Socket Designation:" |awk -F: '{print $1 "\t" ":"$2}')
 TYPE=$( echo "$LPROC" | egrep -w -m$COUNT "Type:" | awk -F: '{print $1 "\t\t\t" ":"$2}')
 FAM=$( echo "$LPROC" | egrep -w -m$COUNT "Family:" | awk -F: '{print $1"\t\t\t" ":"$2}')
 VER=$( echo "$LPROC" | egrep -w -m$COUNT "Version:" | awk -F: '{print $1 "\t\t\t" ":"$2}')
 VOL=$( echo "$LPROC" | egrep -w -m$COUNT "Voltage:" | awk -F: '{print $1 "\t\t\t" ":"$2}')
 MXSP=$( echo "$LPROC" | egrep -w -m$COUNT "Max Speed:" | awk -F: '{print $1 "\t\t" ":"$2}')
 CRSP=$( echo "$LPROC" | egrep -w -m$COUNT "Current Speed:" | awk -F: '{print $1 "\t\t" ":"$2}')
 SRL=$( echo "$LPROC" | egrep -w -m$COUNT "Serial Number:" | awk -F: '{print $1 "\t\t" ":"$2}')
 TAG=$( echo "$LPROC" | egrep -w -m$COUNT "Asset Tag:" | awk -F: '{print $1 "\t\t" ":"$2}')
 PART=$( echo "$LPROC" | egrep -w -m$COUNT "Part Number:" | awk -F: '{print $1 "\t\t" ":"$2}')

 for (( num=1; num <= $COUNT; num++ )); do
    echo "$SOCK"|sed "$num!d"
    echo "$TYPE"|sed "$num!d"
    echo "$FAM"|sed "$num!d"
    echo "$VER"|sed "$num!d"
    echo "$VOL"|sed "$num!d"
    echo "$MXSP"|sed "$num!d"
    echo "$CRSP"|sed "$num!d"
    echo "$SRL"|sed "$num!d"
    echo "$TAG"|sed "$num!d"
    echo "$PART"|sed "$num!d"
    echo -e
 done
 }
fi
}

#-------Fetch system memory (RAM) details--------#
memfun()
{
DMEMOUT=$(dmidecode --type memory)
PHYMEM=$(echo "$DMEMOUT"|sed -n -e '/Memory Device/,$p')
MNDATA=$(echo "$DMEMOUT"|awk '/Physical Memory Array/,/Number Of Devices/')

echo -e "\n\t $S"
echo -e "\t\tSystem Memory Details (RAM)"
echo -e "\t $S"

echo -e "Total RAM (/proc/meminfo)\t\t: "$(grep MemTotal /proc/meminfo|awk '{print $2/1024}') "MiB OR" $(grep MemTotal /proc/meminfo|\
awk '{print $2/1024/1024}') "GiB"

dmidecode --type system|grep -i "virtual" 1> /dev/null && VIRT='Y' || VIRT='N'
if [ $VIRT == 'Y' ]; then
  echo -e "\n\t >>>>>> Skipping the details since system found to be a virtual system <<<<<<\n"
else
 {
  echo -e "Error Detecting Method \t\t\t: "$(echo "$MNDATA"|grep 'Error Correction'|awk -F\: '{ print $2 }'|sed 's/ //')
  echo -e "Maximum Capacity \t\t\t: "$(echo "$MNDATA"|grep "Maximum Capacity:"|awk -F\: '{ print $2 }'|sed 's/ //')
  echo -e "Max. Memory Modules Slots Found \t: "$(echo "$MNDATA"|grep "Number Of Devices:"|awk -F\: '{ print $2 }'|sed 's/ //')
  echo -e "No. Of Memory Module(s) Found\t\t: "$(echo "$DMEMOUT"|grep "Size:"|awk -F\: '{ print $2 }'|grep -c '^[[:blank:]][0-9]')

  echo "$DMEMOUT"|grep "Installed Size"|grep -v "Not"|awk -F: '{print "\t" $2}'
  echo -e "\n\t Details Of Each Memory Module(s) Detected "
  echo -e "\t$D"
  COL1=$(echo "$PHYMEM"|grep -E '[[:blank:]]Size: [0-9]+' -A11|egrep -v "Set|Tag"|sed -e 's/^\s*//'|awk -F: '{print $1}'|sed 's/--//')
  COL2=$(echo "$PHYMEM"|grep -E '[[:blank:]]Size: [0-9]+' -A11|egrep -v "Set|Tag"|awk -F: '{print ":"$2}'|sed  -e 's/^\s*//')

  paste  <(echo "$COL1") <(echo "$COL2") -d ':'|column -t -s:|sed -e 's/^/\t\t/g'|grep --color -E "Locator|Bank|$"
 }
fi
}

#-------Fetch PCI device details--------#
pcifun()
{
echo -e "\n\t $S"
echo -e "\t\t PCI Controller(s) Found \t\t\t"
echo -e "\t $S"
COL1=$(lspci | grep controller|awk -F: '{print $2}'|sed -e 's/^....//'|awk '{ printf "%-10s\n", $1}')
COL2=$(lspci | grep controller|awk -F: '{print ":"$3}'|sed -e 's/^\s*//' -e '/^$/d' -e 's/^/\t\t/g')
paste  <(echo "$COL1") <(echo "$COL2") -d '='|column -t -s=|sort -u
}

#-------Fetch hard drive/disk (storage) details--------#
diskfun()
{
echo -e "\n\t $S"
echo -e "\t\t Storage Device Details \t\t\t"
echo -e "\t $S"
echo -e "\nDevice type \t\tLogical Name \t\t\tSize"
echo -e "$D$D"

TDISK=$(lsblk -d --noheading|egrep '^sd|^vd'|awk '{ print $1" "$4 }'|sort)
LDISK=$(echo "$TDISK"|awk '{print $1}'|sort)

multipath -ll &> /dev/nul && {
 MDISKS=$(multipath -l|grep -o sd[a-z0-9].*|awk '{ print $1 }'|sort)
 MFOUND="y"
 MDRIVES=$(multipath -l|grep ^[a-z0-9]|grep -v '^size'|awk '{ print $1 }'|sort)
 } || MFOUND="n"

for L in $(echo "$LDISK"); do
 echo "$MDISKS"|grep -w "$L" &> /dev/null || echo -e "$TDISK"|grep "$L"|awk '{ print "Disk\t\t\t/dev/"$1"\t\t\t"$2 }'
done

#-------print disk details depending on version-----------#
echo -e "\n\t\t Details Of Each Hard Drive(s) (local) Found"
echo -e "\t$D$D"

dmidecode --type system|grep -i "virtual" 1> /dev/null && VIRT='Y' || VIRT='N'
if [ $VIRT == 'Y' ]; then
  echo -e "\t >>>>>> Skipping the details since system found to be a virtual system <<<<<<\n"
else
{
 for L in $(echo "$LDISK"); do
 {
   echo "$MDISKS"|grep "$L" &> /dev/null || {
    echo -e "\t$D$D"
    echo -e "\t\t\t\t Disk :" $L
    echo -e "\t$D$D"
    echo -e "\t Disk Model \t\t\t :" $(cat /sys/block/$L/device/model 2> /dev/null)
    echo -e "\t Disk Vendor \t\t\t :" $(cat /sys/block/$L/device/vendor 2> /dev/null)
    echo -e "\t Disk Serial Number \t\t :" $(/usr/sbin/smartctl -i $L|grep "Serial Number"|awk -F: '{print $2}' 2> /dev/null)
    echo -e "\t Drive Firmware Version \t :" $(/usr/sbin/smartctl -i $L|grep "Firmware Version"|awk -F: '{print $2}' 2> /dev/null)
    echo -e "\t Device Path \t\t\t :" $(ls -l /dev/disk/by-path/|grep -w $L|grep -o "pci.*" 2> /dev/null)
   }
 }
 done

 if [ $MFOUND == 'y' ]; then
  {
  echo -e "\n\t\t\t These are multipathed drives"
  echo -e "\t$S$S"
  for M in $(echo "$MDRIVES")
  do
   echo -e "\t/dev/mapper/$M \t  ------- Size : $(multipath -l|grep -w "$M" -A1|grep size|awk '{print $1}'|awk -F= '{print $2}')"
  done
  }
 fi
}
fi

}

#-------Fetch network hardware details--------#
netfun()
{

#-----getting network interface details depending on Linux variant-----#
if [[ -f /etc/os-release && ! -f /etc/redhat-release ]]; then
{
 LVER=$(grep -w 'NAME' /etc/os-release |awk -F= '{ print $2 }'|sed 's/"//g')
 
 if [[ $LVER == 'SLES' || $LVER == 'SLED' ]]; then
  cd /etc/sysconfig/network/
  PNET=$(ls|grep 'ifcfg-'|sed -e 's/ifcfg-//g'|grep -v 'lo')
  cd - &> /dev/null
 elif [ $LVER == 'Ubuntu' ]; then
  PNET=$(ip a|grep ^[2-9]|awk -F: '{ print $2 }'|sed 's/ //g')
 fi
}
else
{
 cd /etc/sysconfig/network-scripts &> /dev/null
 PNET=$(ls|grep 'ifcfg-'|sed 's/ifcfg-//'|grep -v 'lo')
 cd - &> /dev/null
}
fi

#------finding active network interfaces------#
ANET=$(ip a|grep -w inet|grep brd|egrep -i -v '127.0.0|vir'|awk '{ print $NF }')

[[ $(ls -A /proc/net/bonding/ 2>/dev/null) ]] && SLAVEI=$(cat /proc/net/bonding/bond*|grep "Slave Interface"|awk '{print $3}') || SLAVEI=""

echo -e "\n\t $S"
echo -e "\t\t Network Hardware Info"
echo -e "\t $S"
echo -e "Ethernet Controller Name \t\t:" $(lspci|grep -o Ethernet.*|awk -F: '{ print $2 }'|uniq|sed 's/ //')
echo -e "Total Network Interface(s) Found\t:" $(echo "$PNET"|wc -l)
echo -e "Active Network Interface(s)\t\t:" $(echo "$ANET"|wc -l)

echo -e "\n\t  Details Of Active Standalone Network Interface(s) Found"
echo -e "\t $D"
if [ "$ANET" != "" ]; then
{
  for i in $(echo "$ANET"); do
  {
   ETHD=$(ethtool -i $i)
   echo "$ANET"|egrep "bond|team" &> /dev/null && continue
   echo -e "\t Interface Name \t\t :" $i
   echo -e "\t IP Address (primary) \t\t :" $(ip a s $i|grep -w inet | awk '{print $2}')
   echo -e "\t Hardware Address \t\t :" $(ip a s $i|grep ether|awk '{ print $2 }')
   echo -e "\t Driver Module Name \t\t :" $(echo "$ETHD"|grep driver|awk '{print $2}')
   echo -e "\t Driver Version \t\t :" $(echo "$ETHD"|grep ^version|awk '{print $2}')
   echo -e "\t Firmware Version \t\t :" $(echo "$ETHD"|grep ^firmware|awk '{print $2}')
   echo -e "\t Speed \t\t\t\t :" $(cat /sys/class/net/$i/speed 2>/dev/null) "Mb/s"
   echo -e "\t Duplex Mode \t\t\t :" $(cat /sys/class/net/$i/duplex 2>/dev/null) "\n"
  }
  done

  echo "$ANET"|egrep "bond|team" &> /dev/null && {
  echo -e "\t  Details Of Network Bonding Interface(s)"
  echo -e "\t $D"
  for BNET in $(ls /proc/net/bonding/*); do
  {
    DT=$(cat $BNET)
    echo -e "\t Bonding Interface Name \t :" $(echo $BNET|awk -F/ '{print $NF}')
    echo -e "\t IP Address (primary) \t\t :" $(ip a s $(echo $BNET|awk -F/ '{print $NF}')|grep -w inet|grep -w brd|/
awk '{print $2}'|sed 's/[/]24//')
    echo -e "\t Bonding Mode \t\t\t :" $(echo "$DT"|grep "Bonding Mode"|awk -F: '{print $2}'|sed 's/ //')
    echo -e "\t Bonding Interface Speed \t :" $(ethtool $(echo $BNET|awk -F/ '{print $NF}')|grep Speed|awk '{print $2}')
    echo -e "\t Primary Slave \t\t\t :" $(echo "$DT"|grep "Primary Slave"|awk -F: '{print $2}'|sed 's/ //')
    echo -e "\t Duplex Mode \t\t\t :" $(ethtool $(echo $BNET|awk -F/ '{print $NF}')|grep Duplex|awk '{print $2}')
    echo -e "\t Slave Interfaces \t\t :" $(echo "$DT"|grep "Slave Interface"|awk -F: '{print $2}'|sed 's/ //')
    echo -e "\t Currently Active Slave \t :" $(echo "$DT"|grep "Currently Active Slave"|awk -F: '{print $2}'|sed 's/ //')"\n"
  }
  done
  }
}
else
 echo -e "\t No network interfaces active!\n"
fi
}

#----------Simple health check (resource stats)--------------#
healthcheck()
{
MOUNT=$(mount|egrep -iw "ext4|ext3|xfs|gfs|gfs2|btrfs"|grep -v "loop"|sort -u -t' ' -k1,2)
FS_USAGE=$(df -PTh|egrep -iw "ext4|ext3|xfs|gfs|gfs2|btrfs"|grep -v "loop"|sort -k6n|awk '!seen[$1]++')
IUSAGE=$(df -PThi|egrep -iw "ext4|ext3|xfs|gfs|gfs2|btrfs"|grep -v "loop"|sort -k6n|awk '!seen[$1]++')

if [ $COLOR == y ]; then
{
 GCOLOR="\e[47;32m ------ OK/HEALTHY \e[0m"
 WCOLOR="\e[43;31m ------ WARNING \e[0m"
 CCOLOR="\e[47;31m ------ CRITICAL \e[0m"
}
else
{
 GCOLOR=" ------ OK/HEALTHY "
 WCOLOR=" ------ WARNING "
 CCOLOR=" ------ CRITICAL "
}
fi

echo -e "$S"
echo -e "\tSystem Health Status"
echo -e "$S"

#--------Check for any read-only file systems--------#
echo -e "\nChecking For Read-only File System[s]"
echo -e "$D"
echo "$MOUNT"|grep -w \(ro\) && echo -e "\n.....Read Only file system[s] found"|| echo -e ".....No read-only file system[s] found. "

#--------Check for currently mounted file systems--------#
echo -e "\n\nChecking For Currently Mounted File System[s]"
echo -e "$D$D"
echo "$MOUNT"|column -t

#--------Check disk usage on all mounted file systems--------#
echo -e "\n\nChecking For Disk Usage On Mounted File System[s]"
echo -e "$D$D"
echo -e "( 0-90% = OK/HEALTHY, 90-95% = WARNING, 95-100% = CRITICAL )"
echo -e "$D$D"
echo -e "Mounted File System[s] Utilization (Percentage Used):\n"

COL1=$(echo "$FS_USAGE"|awk '{print $1 " "$7}')
COL2=$(echo "$FS_USAGE"|awk '{print $6}'|sed -e 's/%//g')

for i in $(echo "$COL2"); do
{
  if [ $i -ge 95 ]; then
    COL3="$(echo -e $i"% $CCOLOR\n$COL3")"
  elif [[ $i -ge 90 && $i -lt 95 ]]; then
    COL3="$(echo -e $i"% $WCOLOR\n$COL3")"
  else
    COL3="$(echo -e $i"% $GCOLOR\n$COL3")"
  fi
}
done
COL3=$(echo "$COL3"|sort -k1n)
paste  <(echo "$COL1") <(echo "$COL3") -d' '|column -t

#--------Check for any zombie processes--------#
echo -e "\n\nChecking For Zombie Processes"
echo -e "$D"
ps -eo stat|grep -w Z 1>&2 > /dev/null
if [ $? == 0 ]; then
  echo -e "Number of zombie process on the system are :" $(ps -eo stat|grep -w Z|wc -l)
  echo -e "\n  Details of each zombie processes found   "
  echo -e "  $D"
  ZPROC=$(ps -eo stat,pid|grep -w Z|awk '{print $2}')
  for i in $(echo "$ZPROC"); do
      ps -o pid,ppid,user,stat,args -p $i
  done
else
 echo -e "No zombie processes found on the system."
fi
#--------Check Inode usage--------#
echo -e "\n\nChecking For INode Usage"
echo -e "$D$D"
echo -e "( 0-90% = OK/HEALTHY, 90-95% = WARNING, 95-100% = CRITICAL )"
echo -e "$D$D"
echo -e "INode Utilization (Percentage Used):\n"

COL11=$(echo "$IUSAGE"|awk '{print $1" "$7}')
COL22=$(echo "$IUSAGE"|awk '{print $6}'|sed -e 's/%//g')

for i in $(echo "$COL22"); do
{
  if [[ $i = *[[:digit:]]* ]]; then
  {
  if [ $i -ge 95 ]; then
    COL33="$(echo -e $i"% $CCOLOR\n$COL33")"
  elif [[ $i -ge 90 && $i -lt 95 ]]; then
    COL33="$(echo -e $i"% $WCOLOR\n$COL33")"
  else
    COL33="$(echo -e $i"% $GCOLOR\n$COL33")"
  fi
  }
  else
    COL33="$(echo -e $i"% (Inode Percentage details not available)\n$COL33")"
  fi
}
done

COL33=$(echo "$COL33"|sort -k1n)
paste  <(echo "$COL11") <(echo "$COL33") -d' '|column -t

#--------Check for SWAP Utilization--------#
echo -e "\n\nChecking SWAP Details"
echo -e "$D"
echo -e "Total Swap Memory in MiB : "$(grep -w SwapTotal /proc/meminfo|awk '{print $2/1024}')", in GiB : "\
$(grep -w SwapTotal /proc/meminfo|awk '{print $2/1024/1024}')
echo -e "Swap Free Memory in MiB : "$(grep -w SwapFree /proc/meminfo|awk '{print $2/1024}')", in GiB : "\
$(grep -w SwapFree /proc/meminfo|awk '{print $2/1024/1024}')

#--------Check for Processor Utilization (current data)--------#
echo -e "\n\nChecking For Processor Utilization"
echo -e "$D"
echo -e "\nCurrent Processor Utilization Summary :\n"
mpstat|tail -2

#--------Check for load average (current data)--------#
echo -e "\n\nChecking For Load Average"
echo -e "$D"
echo -e "Current Load Average : $(uptime|grep -o "load average.*"|awk '{print $3" " $4" " $5}')"

#------Print most recent 3 reboot events if available----#
echo -e "\n\nMost Recent 3 Reboot Events"
echo -e "$D$D"
last -x 2> /dev/null|grep reboot 1> /dev/null && /usr/bin/last -x 2> /dev/null|grep reboot|head -3 || \
echo -e "No reboot events are recorded."

#------Print most recent 3 shutdown events if available-----#
echo -e "\n\nMost Recent 3 Shutdown Events"
echo -e "$D$D"
last -x 2> /dev/null|grep shutdown 1> /dev/null && /usr/bin/last -x 2> /dev/null|grep shutdown|head -3 || \
echo -e "No shutdown events are recorded."

#--------Print top 5 most memory consuming resources---------#
echo -e "\n\nTop 5 Memory Resource Hog Processes"
echo -e "$D$D"
ps -eo pmem,pcpu,pid,ppid,user,stat,args | sort -k 1 -r | head -6|sed 's/$/\n/'

#--------Print top 5 most CPU consuming resources---------#
echo -e "\n\nTop 5 CPU Resource Hog Processes"
echo -e "$D$D"
ps -eo pcpu,pmem,pid,ppid,user,stat,args | sort -k 1 -r | head -6|sed 's/$/\n/'
}

#-------Simple footer message-------#
footfun()
{
echo -e "NOTE:- If any of the above fields are marked as \"blank\" or \"NONE\" or \"UNKNOWN\" or \"Not Available\" or \"Not Specified\"
that means either there is no value present in the system for these fields, otherwise that value may not be available,
or suppressed since there was an error in fetching details."
echo -e "\n\t\t %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"
echo -e "\t\t   <>--------<> Powered By : https://www.simplylinuxfaq.com <>--------<>"
echo -e "\t\t %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"
}

#--------This is the main program which calls other sub functions--------#
mainprog()
{
 headfun
 osfun
 memfun
 procfun
 diskfun
 pcifun
 netfun
 healthcheck
 footfun
}

case "$1" in
 --RAM|--ram|--memory)
  memfun 2>/dev/null
 ;;
 --cpu|--CPU)
  procfun 2>/dev/null
 ;;
 --disk)
  diskfun 2>/dev/null
 ;;
 --network)
  netfun 2>/dev/null
 ;;
 --details|--all)
  mainprog 2>/dev/null
 ;;
 --dump)
  if [ $# != 2 ];
   then
    echo -e "Error: Invalid Arguments Passed."
    echo -e "Usage: hwlist --dump <DumpFileName>"
    exit 1
  fi
  COLOR="n"
  export COLOR
  mainprog > $2
 ;;
 --os|--system)
  osfun 2>/dev/null
 ;;
 --pci|--PCI)
  pcifun 2>/dev/null
 ;;
 --health|--HEALTH)
  healthcheck 2>/dev/null
 ;;
 --version)
  echo -e "v2.2"
 ;;
 --help|--info)
echo -e "
NAME
       hwlist - prints system hardware device details from a Linux system.

SYNOPSIS
       hwlist --<parameters>
       [ parameters are: --system, --ram, --cpu, --disk, --network, --pci, --health, --all, --dump <DumpFileName> ]

DESCRIPTION
This command is used to fetch hardware details from a Linux system and tested to work on RHEL 8(beta)/7/6,
SLES/SLED 12/11, CentOS 7/6, OEL, Ubuntu 14/16/18, Mint 18, and it may work in other Linux variants as well,
however, not tested. This command would need to be executed along with parameters as mentioned above to get
proper details. Further explanation is given below in this page. This command needs to be executed as a root
user, otherwise, with root privileges using 'sudo' command.

When called without any parameters this command would print out a short help message.


To print system (OS) details:

         command -----> # hwlist --system  OR # hwlist --os

   This would produce a summary of data such as : Linux variant (example: RHEL6.5),
   kernel version, system uptime, BIOS summary, motherboard details, server
   (hardware) device details.


To print memory details (RAM) :

         command -----> # hwlist --memory OR # hwlist --RAM OR # hwlist --ram

   When called with --memory or --ram OR --RAM it would produce details about
   total RAM installed (physical memory), details of each memory module such
   as size, form factor, type, speed, serial number of the module etc,. If
   system is found to be a virtual system then it would skip printing details
   about each memory module.


To print CPU (processor) details:

         command -----> # hwlist --cpu OR # hwlist --CPU

   This would produce details about CPU being used on the system such as
   CPU manufacturer, model, family, stepping and also details of each processor
   modules being used. Details such as CPU type, family, serial number, socket etc,
   are produced for each processor module being used. If system is found to be a
   virtual system then it would skip printing details of such processors.


To print disk (hard disk/drive) details:

         command -----> # hwlist --disk

   The above command would print hard drive (disk) details such as size, logical name,
   disk model, disk vendor, serial number, firmware version etc,. The command would not
   produce hardware specifications of each drive if system is found to be a virtual
   system.


To print network hardware details:

         command -----> # hwlist --network

   This would produce details of network interfaces found on the system such
   as network interface name, ip address, driver module name, driver firmware
   version, hardware address etc,.


To print PCI device details:

         command -----> # hwlist --pci

   When called with this parameter it would list out all PCI devices found in the system.


To get complete system hardware details :


         command -----> # hwlist --all OR # hwlist --details

   This would produce the complete system hardware details. So, details of all hardware components
   such as CPU, RAM, disk, PCI, BIOS, network, OS would get printed on terminal along with
   health details of the system.


To get system health status :

         command -----> # hwlist --health

   This would show the operating system overall health status. A summary of file system
   usage, disk usage, I-node usage, any zombie processes found, list of processes/threads
   which are consuming high CPU/RAM etc,.


To dump complete system details to a file :

         command -----> # hwlist --dump <DumpFileName> [ DumpFileName can be an absolute name ]

   The dump parameter would create a file as specified by DumpFileName if it doesn't exists
   on the specified location (example: # hwlist --dump /tmp/hardware.out) and then
   dumps all data to that file. If the file exists then it gets over-written. If
   complete path is not specified then it would create file as per the name in the
   current working directory.

AUTHOR:
        Sadashiva Murthy M (https://www.simplylinuxfaq.com | SimplyLinuxFAQ@gmail.com)
"|less
 ;;
 *)
  echo "Usage: hwlist { --system, --ram, --cpu, --disk, --network, --pci, --health, --all, --dump <DumpFileName> }"
  echo -e "To get help : hwlist --help|--info. This would open up help page which can be scrolled up/down, otherwise press 'q' to quit."
  exit 2
 ;;
esac
#--------------------end of the file------------------------------#
